import math
import re
import random
import json

from tts import *
from time import time
import discord
import lavalink
from discord.ext import commands
from credentials import main_password, main_nickname, main_web_addr,gachi_things

url_rx = re.compile('https?://(?:www\\.)?.+')


class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

        if not hasattr(bot, 'lavalink'):
            bot.lavalink = lavalink.Client(bot.user.id)
            bot.lavalink.add_node('127.0.0.1', 2333, main_password, 'ru', 'default-node')
            bot.add_listener(bot.lavalink.voice_update_handler, 'on_socket_response')

    def cog_unload(self):
        self.bot.lavalink._event_hooks.clear()

    async def cog_before_invoke(self, ctx):
        guild_check = ctx.guild is not None

        if guild_check:
            await self.ensure_voice(ctx)

        return guild_check

    async def cog_command_error(self, ctx, error):
        if isinstance(error, commands.CommandInvokeError):
            await ctx.send(error.original)

    async def connect_to(self, guild_id: int, channel_id):
        ws = self.bot._connection._get_websocket(guild_id)
        await ws.voice_state(str(guild_id), channel_id)

    @commands.command(aliases=['p'], usage='?[p|play] <—Å—Å—ã–ª–∫–∞/–Ω–∞–∑–≤–∞–Ω–∏–µ>', help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏')
    async def play(self, ctx, *, query: str):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        query = query.strip('<>')
        if not url_rx.match(query):
            query = f'ytsearch:{query}'
        results = await player.node.get_tracks(query)
        if not results or not results['tracks']:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        embed = discord.Embed(color=discord.Color.blurple())
        if results['loadType'] == 'PLAYLIST_LOADED':
            tracks = results['tracks']
            for track in tracks:
                player.add(requester=ctx.author.id, track=track)
            embed.title = '–ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω'
            embed.description = f'{results["playlistInfo"]["name"]} - {len(tracks)}'
        else:
            if url_rx.match(query):
                track = results['tracks'][0]
            else:
                text_channel = ctx.message.channel
                user = ctx.message.author
                tracks = results['tracks']
                embedValue = ''
                length = 10 if len(tracks) > 10 else len(tracks)
                for i in range(length):
                    title = tracks[i]['info']['title']
                    embedValue += '{}: {}\n'.format(i + 1, title)
                choiceEmbed = discord.Embed(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é", description=embedValue,
                                            color=discord.Color.blurple())
                choiceEmbed.set_footer(text='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã')
                choice = await ctx.send(embed=choiceEmbed, delete_after=30)

                def verify(m):
                    if m.content.isdigit():
                        return (0 <= int(m.content) < 11) and (m.channel == text_channel) and (m.author == user)
                    return False

                msg = await self.bot.wait_for('message', check=verify, timeout=30)
                if int(msg.content) == 0:
                    return await choice.delete()
                track = tracks[int(msg.content) - 1]
                await choice.delete()
            embed.title = '–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω'
            embed.description = f'[{track["info"]["title"]}]({track["info"]["uri"]})'
            player.add(requester=ctx.author.id, track=track)
        await ctx.send(embed=embed)
        if not player.is_playing:
            await player.play()

    @commands.command(usage='?[gachi|gachibass]', help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –º—É–∑—ã–∫–∏',
                      aliases=['gachi'])
    async def gachibass(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        with open('resources/gachi.txt', 'r') as f:
            tracks = json.load(f)
        track = random.choice(tracks)
        player.add(requester=ctx.author.id, track=track)
        await ctx.send(random.choice(gachi_things))
        if not player.is_playing:
            await player.play()

    @commands.command(help='–ó–∞—á–µ–º', usage='?why <–∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π> (–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)')
    async def why(self, ctx, amt: int = 1):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if (int(amt) > 20) and (ctx.author.name != main_nickname):
            return await ctx.send('–ù–µ—Ç')
        query = 'why.mp3'
        results = await player.node.get_tracks(query)
        track = results['tracks'][0]
        for i in range(int(amt)):
            player.add(requester=ctx.author.id, track=track)
        if not player.is_playing:
            await player.play()

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å', usage='?tts <—Ç–µ–∫—Å—Ç>')
    async def tts(self, ctx, *, text):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not text:
            return await ctx.send('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ?tts <—Å–æ–æ–±—â–µ–Ω–∏–µ>')
        ts = time()
        name = 'output{}.mp3'.format(ts)
        await create_mp3(text, name)
        query = 'outputs/'+name
        results = await player.node.get_tracks(query)
        track = results['tracks'][0]
        player.add(requester=ctx.author.id, track=track)
        if not player.is_playing:
            await player.play()

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –º—É–∑—ã–∫–∏', usage='?seek <–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö>')
    async def seek(self, ctx, *, seconds: int):
        player = self.bot.lavalink.players.get(ctx.guild.id)

        track_time = player.position + (seconds * 1000)
        await player.seek(track_time)

        await ctx.send(f'–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ **{lavalink.utils.format_time(track_time)}**')

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞', usage='?skip')
    async def skip(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)

        if not player.is_playing:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')

        await player.skip()
        await ctx.send('‚è≠ | –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω')

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ–µ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏', usage='?stop')
    async def stop(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)

        if not player.is_playing:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')

        player.queue.clear()
        await player.stop()
        await self.connect_to(ctx.guild.id, None)
        await ctx.send('‚èπ | –ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–ª–µ–µ—Ä–∞', usage='?clear')
    async def clear(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)

        if not player.queue:
            return await ctx.send('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è')

        player.queue.clear()
        await ctx.send('‚≠ï | –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞')

    @commands.command(aliases=['n', 'np', 'playing', 'current'], usage='?[np|now|playing|current]',
                      help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞')
    async def now(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.current:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')
        position = lavalink.utils.format_time(player.position)
        if player.current.stream:
            duration = 'üî¥ LIVE'
        else:
            duration = lavalink.utils.format_time(player.current.duration)
        song = f'**[{player.current.title}]({player.current.uri})**\n({position}/{duration})'

        embed = discord.Embed(color=discord.Color.blurple(),
                              title='–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç', description=song)
        await ctx.send(embed=embed)

    @commands.command(aliases=['q'], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
                      usage='?[q|queue]')
    async def queue(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.queue:
            return await ctx.send('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è')
        items_per_page = 10
        local_queue = player.queue.copy()
        pages = math.ceil(len(player.queue) / items_per_page)
        queue_list = ''
        for index, track in enumerate(local_queue[0:10], start=0):
            queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'
        embed = discord.Embed(colour=discord.Color.blurple(),
                              description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
        msg = await ctx.send(embed=embed)
        if pages > 1:
            def verify(react, member):
                return (react.message.id == msg.id) and (member != self.bot.user)

            page = 1
            await msg.add_reaction('‚ñ∂')
            await msg.add_reaction('‚è≠')
            await msg.add_reaction('‚ùå')
            while True:
                reaction, user = await self.bot.wait_for('reaction_add', check=verify)
                if str(reaction.emoji) == '‚ñ∂':
                    page += 1
                    start = (page - 1) * items_per_page
                    end = start + items_per_page
                    queue_list = ''
                    for index, track in enumerate(local_queue[start:end], start=start):
                        queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'
                    embed = discord.Embed(colour=discord.Color.blurple(),
                                          description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
                    await msg.edit(embed=embed)
                    await msg.clear_reactions()
                    await msg.add_reaction('‚èÆ')
                    await msg.add_reaction('‚óÄ')
                    if page != pages:
                        await msg.add_reaction('‚ñ∂')
                        await msg.add_reaction('‚è≠')
                    await msg.add_reaction('‚ùå')
                elif str(reaction.emoji) == '‚è≠':
                    page = pages
                    start = (page - 1) * items_per_page
                    end = start + items_per_page
                    queue_list = ''
                    for index, track in enumerate(local_queue[start:end], start=start):
                        queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'
                    embed = discord.Embed(colour=discord.Color.blurple(),
                                          description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
                    await msg.edit(embed=embed)
                    await msg.clear_reactions()
                    await msg.add_reaction('‚èÆ')
                    await msg.add_reaction('‚óÄ')
                    await msg.add_reaction('‚ùå')
                elif str(reaction.emoji) == '‚óÄ':
                    page -= 1
                    start = (page - 1) * items_per_page
                    end = start + items_per_page
                    queue_list = ''
                    for index, track in enumerate(local_queue[start:end], start=start):
                        queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'
                    embed = discord.Embed(colour=discord.Color.blurple(),
                                          description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
                    await msg.edit(embed=embed)
                    await msg.clear_reactions()
                    if page != 1:
                        await msg.add_reaction('‚èÆ')
                        await msg.add_reaction('‚óÄ')
                    await msg.add_reaction('‚ñ∂')
                    await msg.add_reaction('‚è≠')
                    await msg.add_reaction('‚ùå')
                elif str(reaction.emoji) == '‚èÆ':
                    page = 1
                    start = (page - 1) * items_per_page
                    end = start + items_per_page
                    queue_list = ''
                    for index, track in enumerate(local_queue[start:end], start=start):
                        queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'
                    embed = discord.Embed(colour=discord.Color.blurple(),
                                          description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
                    await msg.edit(embed=embed)
                    await msg.clear_reactions()
                    await msg.add_reaction('‚ñ∂')
                    await msg.add_reaction('‚è≠')
                    await msg.add_reaction('‚ùå')
                elif str(reaction.emoji) == '‚ùå':
                    return await msg.delete()
                else:
                    await reaction.remove(user)

    @commands.command(aliases=['resume'], usage='?[pause|resume]',
                      help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
    async def pause(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.is_playing:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')
        if player.paused:
            await player.set_pause(False)
            await ctx.send('‚èØ | –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        else:
            await player.set_pause(True)
            await ctx.send('‚èØ | –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    @commands.command(aliases=['vol'], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–∞',
                      usage='?[vol|volume] <–≥—Ä–æ–º–∫–æ—Å—Ç—å(1-1000)>')
    async def volume(self, ctx, volume: int = None):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not volume:
            return await ctx.send(f'üîà | {player.volume}%')
        await player.set_volume(volume)
        await ctx.send(f'üîà | –ó–≤—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {player.volume}%')

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏', usage='?shuffle')
    async def shuffle(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.is_playing:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')
        player.shuffle = not player.shuffle
        await ctx.send('üîÄ | –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ ' + ('–≤–∫–ª—é—á–µ–Ω–æ' if player.shuffle else '–≤—ã–∫–ª—é—á–µ–Ω–æ'))

    @commands.command(aliases=['loop'], usage='?[loop/repeat]',
                      help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏')
    async def repeat(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.is_playing:
            return await ctx.send('–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç')
        player.repeat = not player.repeat
        await ctx.send('üîÅ | –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ' + ('–≤–∫–ª—é—á–µ–Ω–æ' if player.repeat else '–≤—ã–∫–ª—é—á–µ–Ω–æ'))

    @commands.command(help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏', usage='?remove <–∏–Ω–¥–µ–∫—Å>')
    async def remove(self, ctx, index: int):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.queue:
            return await ctx.send('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è')
        if index > len(player.queue) or index < 1:
            return await ctx.send(f'–ò–Ω–¥–µ–∫—Å –¥–æ–∂–µ–Ω –±—ã—Ç—å **–º–µ–∂–¥—É** 1 –∏ {len(player.queue)}')
        removed = player.queue.pop(index - 1)
        await ctx.send(f'**{removed.title}** —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏')

    @commands.command(aliases=['dc', 'leave'], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
                      usage='?[dc|disconnect|leave]')
    async def disconnect(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not player.is_connected:
            return await ctx.send('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
        player.queue.clear()
        await player.stop()
        await self.connect_to(ctx.guild.id, None)
        await ctx.send('*‚É£ | –û—Ç–∫–ª—é—á–µ–Ω')

    @commands.command(aliases=['connect', 'c'], usage='?[c|connect|join]',
                      help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
    async def join(self, ctx):
        player = self.bot.lavalink.players.get(ctx.guild.id)
        if not ctx.author.voice:
            return await ctx.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É')
        if player.channel_id:
            if ctx.author.voice.channel.id == int(player.channel_id):
                return await ctx.send('–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
        await self.connect_to(ctx.guild.id, ctx.author.voice.channel.id)
        await ctx.send('*‚É£ | –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {}'.format(ctx.author.voice.channel))

    async def ensure_voice(self, ctx):
        player = self.bot.lavalink.players.create(ctx.guild.id, endpoint=str(ctx.guild.region))
        should_connect = ctx.command.name in ('play', 'join', 'why', 'tts', 'join', 'gachibass')
        if not ctx.author.voice or not ctx.author.voice.channel:
            raise commands.CommandInvokeError('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
        if not player.is_connected:
            if not should_connect:
                raise commands.CommandInvokeError('–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É')
            permissions = ctx.author.voice.channel.permissions_for(ctx.me)
            if not permissions.connect or not permissions.speak:
                raise commands.CommandInvokeError('I need the `CONNECT` and `SPEAK` permissions.')
            player.store('channel', ctx.channel.id)
            await self.connect_to(ctx.guild.id, str(ctx.author.voice.channel.id))
        else:
            if int(player.channel_id) == ctx.author.voice.channel.id and should_connect:
                return
            if should_connect:
                return await self.connect_to(ctx.guild.id, str(ctx.author.voice.channel.id))
            if int(player.channel_id) != ctx.author.voice.channel.id:
                raise commands.CommandInvokeError('–ú—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö')


def music_setup(bot):
    bot.add_cog(Music(bot))
